@using Web.Models.Bonuses
@model IEnumerable<BonusDto>
@{
    ViewBag.Title = "Index";
}
<br />
@*customize valudation message *@
<style>
    .k-callout-n
    {
        left: 20%;
    }
    textarea
    {
        width: 97%;
    }
</style>
@if (Request.IsAuthenticated)
{
    <div>
        <div id="bonusesGrid" style="width: 1200px;">
        </div>
       
        <script type="text/javascript" language="javascript">
            
           
       $(document).ready(function() {
          var dateFormat = "ddd MMM dd yyyy hh:mm:ss";
           
          function showErrorMessage(e, b, c) {
                    var errorMesage = e.xhr.responseText.replace(/(\\[a-z])+/, " "); // removes tags \r \n
                    errorMesage = errorMesage.replace(/[\s]{2,}/, " "); // removes spaces

                    if (errorMesage === undefined || errorMesage === -1 || errorMesage === "")
                        alert("Bad or empty error response message");
                    else {
                        alert(errorMesage);
                    }
         }


                //NOTE:
                // this is a hack. I didn't find the answer  how to bind employee's id
                // and name from combobox.EmployeeId to selected row's model.EmployeeId
                // I found that they all follow the same approach, or use hidden input element to store EmployeeId.
          var newValueEmployeeId;
          var newValueEmployeeLastName;

                // Sets the employee's Id and last name which was selected using 
                // autocomplete combobox during edit current bonus or creation of new one.

          function setNewValueEmployeeIdAndLastName(id, lastName) {
                    if (id !== undefined && lastName !== undefined && lastName != "") {
                        newValueEmployeeId = id;
                        newValueEmployeeLastName = lastName;
                    }
          }

          var currentValueEmployeeId;
          var currentValueEmployeeLastName;

          function setCurrentValueEmployeeIdAndLastName(id, lastName) {
                    if (id !== undefined)
                        currentValueEmployeeId = id;

                    if (lastName !== undefined)
                        currentValueEmployeeLastName = lastName;
           }
                
                // converts date to format of server
           function setFormattedFilterDate(filter) {
                    
                    if(filter !== undefined) {
                        if (filter.filters !== undefined || filter.filters !== "") {
                            if (filter.filters[0] !== undefined) {
                                if (filter.filters[0].field == "Date") {
                                    filter.filters[0].value = kendo.toString(filter.filters[0].value, dateFormat);
                                }
                            }

                            if (filter.filters[1] !== undefined) {
                                if (filter.filters[1].field == "Date") {
                                    filter.filters[1].value = kendo.toString(filter.filters[1].value, dateFormat);
                                }
                            }
                        }
                    }
                    return filter;
           }

           // datasource for autocomlete combobox to lookup employees names from
           var employeesDataSource = new kendo.data.DataSource({
                    type: "json",
                    serverFiltering: true,
                    transport: {
                        read: { url:"@Url.Action("GetJsonEmployeesByLastName", "Bonuses")",
                                contentType: "application/json",
                                dataType: "json",
                                type: "GET"
                        },
                         
                        // set's the local document variables with  employee's id and last name
                        // selected by an autocomplete control values.
                        parameterMap: function(options, operation) {
                            if (operation === "update" || operation === "create") {
                                setNewValueEmployeeIdAndLastName(options.Id, options.LastName);
                            }
                            return options;
                        },
                    },
                    schema: {
                        model: {
                            id: "EmployeeId",  // Data
                            fields: {
                                EmployeeId: { type: "number" },
                                LastName: {
                                    type: "string",
                                    editable: true,
                                    validation: { required: {message: "2 Employee's last name is required"}}
                                },
                            }
                        }
                    },
                    
                    error: showErrorMessage
            });

                // sets custom editor (autocomplete) for bonuses grid's filed "LastName"
           function employeeAutocompletingEditor(container, options) {
                    $('<input required data-text-field="LastName" data-value-field="EmployeeId" data-bind="value:' + options.field + '"/>')
                        .appendTo(container)
                        .kendoComboBox({
                            filter: "contains",
                            autoBind: false,
                            minLength: 2,
                            // sets the local variables to update values of current row.
                            change: function() {
                                setNewValueEmployeeIdAndLastName(this.value(), this.text());
                            },
                            dataSource: employeesDataSource
                        });
            }
                

            function textareaEditor(container, options) {
                 $('<textarea data-bind="value: ' + options.field + '" cols="10" rows="4"></textarea>')
                .appendTo(container);
            }


            // bind json result from /Bonuses/GetPagedJsonBonuses
            var bonusesDataSource = new kendo.data.DataSource({
                    transport: {
                        
                        read: {
                             url: "@Url.Action("GetPagedJsonBonuses", "Bonuses")",
                             type : "GET",
                             contentType: "application/json",
                             dataType: "json",
                             cache: false
                        },
                        update: {
                            url: "@Url.Action("Edit", "Bonuses")",
                            dataType: "json",
                            type: "POST"
                        },
                        create: {
                            url: "@Url.Action("Create", "Bonuses")",
                            dataType: "json",
                            type: "POST"
                        },
                        parameterMap: function(options, operation) {
                            if (operation === "update" || operation === "create") {
                                
                                // correct format for conversion 
                                var d = new Date(options.Date);
                                options.Date = kendo.toString(d, dateFormat);

                                // updates the BonusDTO.EmployeeId with selected value
                                if (newValueEmployeeId !== undefined)
                                    options.EmployeeId = newValueEmployeeId;
                            }
                            if(operation === "read") {
                                options.filter = setFormattedFilterDate(options.filter);
                            }
                            return options;
                        }
                    },
                    pageSize: 15,
                    serverPaging: true,
                    serverSorting: true,
                    serverFiltering: true,
                    error: showErrorMessage,
                    schema: {
                        data: "Data", // PagedResponse.Data
                        total: "TotalCount", // PagedResponse.TotalCount
                        model: {
                            id: "BonusId",  // Data
                            fields: {
                                EmployeeId: { type: "number" },
                                EmployeeLastName: {
                                    type: "string",
                                    editable: true,
                                    nulable: false,
                                    validation: { required: {message: "Employee's last name is required"}}
                                },
                                Date: {
                                    type: "date",
                                    editable: true,
                                    nullable: false,
                                    validation: {
                                        required: { message: "Date is required to be set" }
                                    }
                                },
                                Amount: {
                                    type: "number",
                                    editable: true,
                                    nullable: false,
                                    defaultValue: 1,
                                    validation: {
                                        required: { message: "Amount is required to be set" }
                                    }
                                },
                                Comment: { type: "string", editable: true },
                                IsActive: { type: "boolean", editable: true, defaultValue:true },
                                Ulc: { type: "string", editable: false },
                                Dlc: { type: "date", editable: false }                            
                            } // fields
                        } // model
                    }// schema 
                });

                // creates bonuses grid control
                $("#bonusesGrid").kendoGrid({
                    dataSource: bonusesDataSource,
                    toolbar: ["create"],
                    editable: "inline",
                    pageable: true,
                    filterable: {
                        extra: false,
                        operators: {
                            string: {
                                contains: "Contains"
                            }
                        }
                    },
                    sortable: {
                        mode: "single",
                        allowUnsort: false
                    },
                    columns: [
                        {
                            field: "BonusId",
                            hidden: true                        
                        },
                        {
                            field: "EmployeeId",
                            hidden: true
                        },
                        {
                            field: "EmployeeLastName",
                            title: "Employee",
                            width: 230,
                            filterable: true,
                            editor: employeeAutocompletingEditor,
                            template: "#=EmployeeLastName#"
                        },
                        {
                            field: "Amount",
                            title: "Amount",
                            width: 95,
                            filterable: {
                                operators: {
                                    number: {
                                        eq: "Is eqaul to"
                                    }
                                }
                            }
                        },
                        {
                            field: "Date",
                            width: 100,
                            filterable: {
                                extra: true,
                                messages: {
                                    and : "And",
                                    or: ""
                                },
                                operators: {
                                    date: {
                                        gte: "from",
                                        lte: "to"
                                    }
                                    
                                }
                            },
                            template: "#= kendo.toString(Date,'MM/dd/yyyy') #"
                        },                    
                        {
                            field: "Comment",
                            titel: "Comment",
                            editor: textareaEditor,
                            filterable: {
                                operators: {
                                    number: {
                                        contains: "Contains"
                                    }
                                }
                            }
                        },
                        {
                            field: "IsActive",
                            width: 78,
                            filterable: true,
                            template:"#= IsActive ? 'yes' : 'no' #",
                            title: "Active"                        
                        }, {
                            field: "Ulc",
                            width: 95,
                            title: "ULC",
                            filterable: {
                                operators: {
                                    string: {
                                        contains: "Contains"
                                    }
                                }
                            }
                        }, {
                            field: "Dlc",
                            title: "DLC",
                            filterable: {
                                operators: {
                                    date: {
                                        eq: "Is eqaul to"
                                    }
                                }
                            },
                            width: 95,
                            template: "#= kendo.toString(Dlc,'MM/dd/yyyy') #"
                        },
                        {
                            command: ["edit"],
                            width: 105,
                            title: " "
                        }
                    ],
                    save: function(gridDataSource) {
                        if (newValueEmployeeId !== undefined && 
                            newValueEmployeeLastName !== undefined && 
                            newValueEmployeeLastName !== "") {
                              setNewValueEmployeeIdAndLastName(newValueEmployeeId, newValueEmployeeLastName);
                              gridDataSource.model.EmployeeId = newValueEmployeeId; // it's a hack to bind model and autocomplete control
                              gridDataSource.model.EmployeeLastName = newValueEmployeeLastName;
                        } else {
                              gridDataSource.model.EmployeeId = currentValueEmployeeId;
                              gridDataSource.model.EmployeeLastName = currentValueEmployeeLastName;
                        }
                    },
                    edit: function(gridDataSource) {
                        setCurrentValueEmployeeIdAndLastName(gridDataSource.model.EmployeeId, 
                                                            gridDataSource.model.EmployeeLastName);
                    },
                    cancel: function(gridDataSource) {
                        setCurrentValueEmployeeIdAndLastName(gridDataSource.model.EmployeeId, 
                                                            gridDataSource.model.EmployeeLastName);
                    }
                });
            });// end of ready function
        </script>
    </div>
}
